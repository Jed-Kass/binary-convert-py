running = True
ip=[]

def convert(octet):

    bin = []
    
    if len(octet) > 3:
        return 1 # WTF THIS IS NOT AN OCTET IT IS TOO LONG.


    try:
        octet = int(octet)
    except ValueError:
        return 2 # WTF THIS IS NOT AN OCTET IT INCLUDED LETTERS AND STUFF



    while octet > 0:
        
        if octet >= 128:
            bin.append(1)
            octet = octet - 128
        elif octet < 128:
            bin.append(0)

        if octet >= 64:
            bin.append(1)
            octet = octet - 64
        elif octet < 64:
            bin.append(0)

        if octet >= 32:
            bin.append(1)
            octet = octet - 32
        elif octet < 32:
            bin.append(0)

        if octet >= 16:
            bin.append(1)
            octet = octet - 16
        elif octet < 16:
            bin.append(0)

        if octet >= 8:
            bin.append(1)
            octet = octet - 8
        elif octet < 8:
            bin.append(0)

        if octet >= 4:
            bin.append(1)
            octet = octet - 4
        elif octet < 4:
            bin.append(0)

        if octet >= 2:
            bin.append(1)
            octet = octet - 2
        elif octet < 2:
            bin.append(0)

        if octet >= 1:
            bin.append(1)
            octet = octet - 1
        elif octet < 1:
            bin.append(0)

    return bin

    

while running == True:

    ip.append(raw_input("Please enter the first octet: "))
    ip.append(raw_input("Please enter the first octet: "))
    ip.append(raw_input("Please enter the first octet: "))
    ip.append(raw_input("Please enter the first octet: "))

    print ip[0] + "." + ip[1] + "." + ip[2] + "." + ip[3]

    x = raw_input("Would you like to convert to binary? [Y/n]: ")
    if x == "" or x.lower == "y":
         
        bin0 = convert(ip[0])
        if bin0 == 1:
            print "Octet is too long, try again."
            break
        elif bin0 == 2:
            print "Octet contains an ASCII character or is blank. Try again."
            break

        bin1 = convert(ip[1])
        if bin1 == 1:
            print "Octet is too long, try again."
            break
        elif bin1 == 2:
            print "Octet contains an ASCII character or is blank. Try again."
            break

        bin2 = convert(ip[2])
        if bin2 == 1:
            print "Octet is too long, try again."
            break
        elif bin2 == 2:
            print "Octet contains an ASCII character or is blank. Try again."
            break
        
        bin3 = convert(ip[3])
        if bin3 == 1:
            print "Octet is too long, try again."
            break
        elif bin3 == 2:
            print "Octet contains an ASCII character or is blank. Try again."
            break

        x = ''.join(map(str, bin0 + bin1 + bin2 + bin3))
        print "\n"
        print x[0:7] + '.' + x[8:15] + '.' + x[16:24] + '.' + x[25:]
        print "\n"



        
    ip=[]
